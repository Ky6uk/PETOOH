require 'open-uri'

# --------------------
# :section: Properties
# --------------------

PEG2RB = "peg2rb"

# ---------------
# :section: Tasks
# ---------------

file "gen/lib/petooh.rb" => "lib/petooh.peg" do |task|
  peg2rb task.source, prepare_dir_for(task.name)
end

file "petooh.rb" => ["gen/lib/petooh.rb", "bin/petooh"] do |task|
  write_file(
    task.name,
    File.read(task.sources[1]).
      gsub(/require\s+['"]petooh['"]/) do |match|
        "# #{match}\n"\
        "#{File.read(task.sources[0])}"
      end
  )
end

file "gen/PETOOH.md" => "../README.md" do |task|
  cp task.source, task.name
end

file "gen/petooh.gemspec" => "petooh.gemspec.erb" do |task|
  sh "erb -T 1 #{task.source} > #{task.name}"
end

# ---------------
# :section: Utils
# ---------------

def log(msg)
  STDERR.puts msg
end

# 
# The same as File#write() but logs its action.
# 
def write_file(file, content)
  log "write #{file}"
  File.write(file, content)
end

# 
# Creates directory for +file+ if it does not exist.
# 
# It returns +file+.
# 
def prepare_dir_for(file)
  mkdir_p File.dirname(file)
  return file
end

def peg2rb src_file, dest_file
  # Ensure PEG2RB is present.
  if not File.file? PEG2RB then
    begin
      STDERR.puts %(It looks like "#{PEG2RB}" is not present. I will try to download it for you.)
      open("https://raw.githubusercontent.com/LavirtheWhiolet/self-bootstrap/master/peg2rb.rb") do |io|
        File.write(PEG2RB, io.read)
      end
    rescue
      raise %("#{PEG2RB}" is not present; download it from "https://github.com/LavirtheWhiolet/self-bootstrap/blob/master/peg2rb.rb")
    end
  end
  # 
  sh "ruby #{PEG2RB} #{src_file} > #{dest_file}"
end
