{...
# encoding: UTF-8

# $Generated$

module PETOOH

  # 
  # +program+ is an Array of PETOOH keywords (in the form of String-s).
  #
  # +debug+ - if true then PETOOH VM state is dumped on each execution step.
  # 
  def run(program, debug = false)
    # Init virtual machine.
    mem = [0] * 16
    data_ptr = 0
    pc = 0  # Index of current instruction in program.
    # Run!
    while pc < program.size
      # Log (if needed).
      if debug
        STDERR.puts "MEM: #{mem.join(" ")}"
        STDERR.puts "PC: #{pc} (#{program[pc]})"
        STDERR.puts "DP: #{data_ptr} (#{mem[data_ptr]})"
      end
      # Analyze current program instruction.
      case program[pc]
      when "Kudah"
        # 
        data_ptr += 1
        # Expand memory if needed.
        if data_ptr >= mem.size
          mem.concat([0] * 16)
        end
        # 
        pc += 1
      when "kudah"
        # 
        data_ptr -= 1
        # Convert the machine's state from the form of
        #   { data_ptr = -1, mem = { -1:x, 0:y, 1:z, … } }
        # to the form of
        #   { data_ptr = 0, mem = { 0:x, 1:y, 2:z, … } }
        if data_ptr < 0
          mem.unshift(0)
          data_ptr = 0
        end
        # 
        pc += 1
      when "Ko"
        mem[data_ptr] += 1
        pc += 1
      when "kO"
        mem[data_ptr] -= 1
        pc += 1
      when "Kukarek"
        print mem[data_ptr].chr
        pc += 1
      when "Kud"
        if mem[data_ptr] == 0
          # Increment PC until corresponding "kud" is encountered
          # (taking nested "Kud"/"kud" into account).
          nest_level = 1
          pc += 1
          while pc < program.size and nest_level > 0
            case program[pc]
            when "Kud"
              nest_level += 1
            when "kud"
              nest_level -= 1
            end
            pc += 1
          end
        else
          # Just skip the instruction.
          pc += 1
        end
      when "kud"
        if mem[data_ptr] != 0
          # Decrement PC until corresponding "Kud" is encountered
          # (taking nested "Kud"/"kud" into account).
          nest_level = 1
          pc -= 1
          while pc > 0 and nest_level > 0
            case program[pc]
            when "Kud"
              nest_level -= 1
            when "kud"
              nest_level += 1
            end
            pc -= 1
          end
          # Position PC right to the corresponding "Kud".
          pc += 1
        else
          # Just skip the instruction.
          pc += 1
        end
      end
    end
  end
  
  # 
  # reads PETOOH program from +io+ and parses it into Array of PETOOH
  # keywords (in the form of String-s).
  # 
  def parse(io)
    yy_parse(io)
  end
  
  private
  
  # Generated by Generator of Parsers of Lavir AKA self-bootstrap.
  
}...

program =
  { val = [] }
  (instruction :>> val / comment)* ;

instruction =
  <
    / "Kudah"
    / "kudah"
    / "Ko"
    / "kO"
    / "Kukarek"
    / "Kud"
    / "kud"
  >:val
;

comment = char ;

{...
  
  # End of generated code.

end

}...
